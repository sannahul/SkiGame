Compiling the game: javac SkiGame.java
Running the game: java SkiGame

I decided to implement a fairly simple game, as I have no previous experience in Javafx or any other Java graphics libraries. I thought that doing a game with some animation, user interaction and a menu would provide me a good overview of the basic functionalities of Javafx. My aim was to make something simple yet polished and reusable, not a something with super complicated game logic. The game starts with a menu screen that allows the user to choose between three levels (at least for now, in the future the number of levels could be increased). The main character is skiing down the screen, and the aim is to reach the end of the window without hitting any trees. The character is controlled using the left and right arrow keys.

As an inspiration, I used the SkiFree game (https://en.wikipedia.org/wiki/SkiFree) that I remember playing in the 90s. As the original graphics of the game are very simple and blocky, I decided to make a new version that looks a bit nicer. I chose a cute penguin character as the skier, as my game logic is very simple and would therefore be suitable for even quite small children. The images (penguin, tree, mountain background for menu) are clipart images that I found from the web and that didn't have any copyright.

To learn about Javafx and how to use it for game development, I used this tutorial by Lee Stemkoski: https://gamedevelopment.tutsplus.com/tutorials/introduction-to-javafx-for-game-development--cms-23835

I started by creating a simple Sprite class that has a position (x and y coordinates), image and size and can be rendered to the canvas. I also added a method that checks if the Sprite intersects with another Sprite, as I need to know whether the skier is hitting the trees. To able able to implement the main game character that can move around, I created a Movable class that extends the Sprite class. Movable has all the same functionalities as Sprite but on top of them it has velocity. The velocity can be set and increased. The update function updates the coordinates based on the current velocity and elapsed time.

The Level class holds a list of obstacle Sprites. It takes the number of Sprites and the image file name as parameters. I wanted to make this class as reusable as possible so I didn't want it to have fixed height and width or image for the obstacles. The set() function that creates the obstacle Sprites calculates the position of the Sprites based on the width and height from the user and the size of the Sprite. However, I gave a fixed minimum and maximum x and y coordinates for the obstacles that are placed randomly in the middle of the level, as I didn't want them to be placed right at the top of the screen making the level completely impossible (the player Sprite and an obstacle Sprite colliding right at the start). Still, even with the fixed minimum coordinates, sometimes the obstacles are placed in a way that makes winning the game very difficult (or even impossible), especially when the number of the randomly placed obstacles is higher. That's a conscious design choice: sometimes the user might not able to complete the level. Most of the time the levels are playable though.

The Gameplay class is where all the game logic happens. Similar to the Level class, it takes the size of the window and the image files for the movable player Sprite and the obstacle Sprites as parameters. The AnimationTimer's handle method utilises the LongValue class that was adapted from the code in Lee Stemkoski's tutorial.

In addition to the main game, I wanted to add a menu screen that would allow the user to choose the level of difficulty. I created a Menu class that takes the height and width, background image and a list of buttons as parameters. The main SkiGame class then controls the interaction between Menu and Gameplay. It creates the buttons to be passed to the menu class and defines the actions for the buttons. For this game, I have an "EASY" button that starts a new game with 3 obstacles placed randomly, a "MEDIUM" button that starts a game with 5 trees and a "HARD" button starting a game with 7 trees. As the size of the list of buttons that the Menu object takes is not fixed, it would be very easy that add more levels.

Testing the classes that use graphics was rather challenging. Most of my unit testing is done in Sprite, Movable, LongValue and Level classes. In addition to unit testing, I tested my game simply by playing the different levels over and over again to check that it does what I expect it to do.
